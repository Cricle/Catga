using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Catga.SourceGenerator;

/// <summary>
/// Behavior registration source generator
/// Automatically discovers and registers all pipeline behaviors
/// </summary>
[Generator]
public class CatgaBehaviorGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Register attribute
        context.RegisterPostInitializationOutput(ctx =>
        {
            ctx.AddSource("CatgaBehaviorAttribute.g.cs", SourceText.From(AttributeSource, Encoding.UTF8));
        });

        // Find all behaviors
        var behaviorProvider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsBehaviorCandidate(node),
                transform: static (ctx, _) => GetBehaviorInfo(ctx))
            .Where(static m => m is not null)
            .Collect();

        // Generate registration
        context.RegisterSourceOutput(behaviorProvider, static (spc, behaviors) =>
        {
            if (behaviors.Length == 0)
            {
                var emptySource = GenerateEmptyRegistration();
                spc.AddSource("CatgaBehaviorRegistration.g.cs", SourceText.From(emptySource, Encoding.UTF8));
                return;
            }

            var source = GenerateRegistrationCode(behaviors!);
            spc.AddSource("CatgaBehaviorRegistration.g.cs", SourceText.From(source, Encoding.UTF8));
        });
    }

    private static bool IsBehaviorCandidate(SyntaxNode node)
    {
        if (node is not ClassDeclarationSyntax classDecl)
            return false;

        if (classDecl.BaseList == null)
            return false;

        foreach (var baseType in classDecl.BaseList.Types)
        {
            var typeName = baseType.Type.ToString();
            if (typeName.Contains("IPipelineBehavior"))
                return true;
        }

        return false;
    }

    private static BehaviorInfo? GetBehaviorInfo(GeneratorSyntaxContext context)
    {
        var classDeclaration = (ClassDeclarationSyntax)context.Node;
        var symbol = context.SemanticModel.GetDeclaredSymbol(classDeclaration);

        if (symbol is not INamedTypeSymbol classSymbol)
            return null;

        // Check for CatgaBehavior attribute to get priority
        var priority = 500; // Default priority
        var attribute = classSymbol.GetAttributes()
            .FirstOrDefault(a => a.AttributeClass?.Name == "CatgaBehaviorAttribute");

        if (attribute != null && attribute.ConstructorArguments.Length > 0)
        {
            priority = (int)attribute.ConstructorArguments[0].Value!;
        }

        foreach (var @interface in classSymbol.AllInterfaces)
        {
            var interfaceName = @interface.OriginalDefinition.ToDisplayString();

            if (interfaceName.StartsWith("Catga.Pipeline.IPipelineBehavior<"))
            {
                return new BehaviorInfo
                {
                    BehaviorType = classSymbol.ToDisplayString(),
                    BehaviorName = classSymbol.Name,
                    Priority = priority,
                    InterfaceType = @interface.ToDisplayString()
                };
            }
        }

        return null;
    }

    private static string GenerateEmptyRegistration()
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine();
        sb.AppendLine("namespace Catga.DependencyInjection;");
        sb.AppendLine();
        sb.AppendLine("public static class CatgaGeneratedBehaviorRegistrations");
        sb.AppendLine("{");
        sb.AppendLine("    public static IServiceCollection AddGeneratedBehaviors(this IServiceCollection services)");
        sb.AppendLine("    {");
        sb.AppendLine("        // No behaviors found");
        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    private static string GenerateRegistrationCode(IEnumerable<BehaviorInfo> behaviors)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine();
        sb.AppendLine("namespace Catga.DependencyInjection;");
        sb.AppendLine();
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Auto-generated behavior registrations");
        sb.AppendLine("/// Behaviors are registered in priority order");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public static class CatgaGeneratedBehaviorRegistrations");
        sb.AppendLine("{");
        sb.AppendLine("    public static IServiceCollection AddGeneratedBehaviors(this IServiceCollection services)");
        sb.AppendLine("    {");

        // Sort by priority (higher priority first)
        var orderedBehaviors = behaviors.OrderByDescending(b => b.Priority);

        foreach (var behavior in orderedBehaviors)
        {
            sb.AppendLine($"        // {behavior.BehaviorName} (Priority: {behavior.Priority})");
            sb.AppendLine($"        services.AddScoped(typeof({behavior.InterfaceType}), typeof({behavior.BehaviorType}));");
        }

        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }

    private const string AttributeSource = @"// <auto-generated/>
#nullable enable

namespace Catga;

/// <summary>
/// Marks a pipeline behavior for automatic registration
/// Behaviors are executed in priority order (higher priority first)
/// </summary>
[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public sealed class CatgaBehaviorAttribute : System.Attribute
{
    /// <summary>
    /// Priority for behavior execution (default: 500)
    /// Higher values execute first
    /// Standard priorities:
    /// - Logging: 1000
    /// - Validation: 900
    /// - Retry: 800
    /// - CircuitBreaker: 700
    /// - Idempotency: 600
    /// - Custom: 500 (default)
    /// - Outbox: 400
    /// </summary>
    public int Priority { get; set; } = 500;

    public CatgaBehaviorAttribute() { }

    public CatgaBehaviorAttribute(int priority)
    {
        Priority = priority;
    }
}
";

    private class BehaviorInfo
    {
        public string BehaviorType { get; set; } = string.Empty;
        public string BehaviorName { get; set; } = string.Empty;
        public string InterfaceType { get; set; } = string.Empty;
        public int Priority { get; set; }
    }
}

