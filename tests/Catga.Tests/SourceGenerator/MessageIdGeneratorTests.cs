using Catga.Abstractions;
using Catga.Core;
using Xunit;

namespace Catga.Tests.SourceGenerator;

/// <summary>
/// Tests for MessageId Source Generator
/// Verifies that MessageId is auto-generated for record, class, and struct types
/// </summary>
public class MessageIdGeneratorTests
{
    [Fact]
    public void RecordCommand_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var command = new GenTestRecordCommand("test-data");

        // Assert
        Assert.NotEqual(0, command.MessageId);
    }

    [Fact]
    public void RecordCommand_ShouldGenerateUniqueMessageIds()
    {
        // Arrange & Act
        var command1 = new GenTestRecordCommand("data1");
        var command2 = new GenTestRecordCommand("data2");

        // Assert
        Assert.NotEqual(command1.MessageId, command2.MessageId);
    }

    [Fact]
    public void ClassCommand_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var command = new GenTestClassCommand { Data = "test-data" };

        // Assert
        Assert.NotEqual(0, command.MessageId);
    }

    [Fact]
    public void ClassCommand_ShouldGenerateUniqueMessageIds()
    {
        // Arrange & Act
        var command1 = new GenTestClassCommand { Data = "data1" };
        var command2 = new GenTestClassCommand { Data = "data2" };

        // Assert
        Assert.NotEqual(command1.MessageId, command2.MessageId);
    }

    [Fact]
    public void StructCommand_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var command = new GenTestStructCommand { Data = "test-data" };

        // Assert
        Assert.NotEqual(0, command.MessageId);
    }

    [Fact]
    public void StructCommand_ShouldGenerateUniqueMessageIds()
    {
        // Arrange & Act
        var command1 = new GenTestStructCommand { Data = "data1" };
        var command2 = new GenTestStructCommand { Data = "data2" };

        // Assert
        Assert.NotEqual(command1.MessageId, command2.MessageId);
    }

    [Fact]
    public void RecordEvent_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var @event = new GenTestRecordEvent("event-id", "event-data");

        // Assert
        Assert.NotEqual(0, @event.MessageId);
    }

    [Fact]
    public void ClassEvent_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var @event = new GenTestClassEvent { Id = "event-id", Data = "event-data" };

        // Assert
        Assert.NotEqual(0, @event.MessageId);
    }

    [Fact]
    public void StructEvent_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var @event = new GenTestStructEvent { Id = "event-id", Data = "event-data" };

        // Assert
        Assert.NotEqual(0, @event.MessageId);
    }

    [Fact]
    public void RecordQuery_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var query = new GenTestRecordQuery("query-id");

        // Assert
        Assert.NotEqual(0, query.MessageId);
    }

    [Fact]
    public void ClassQuery_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var query = new GenTestClassQuery { Id = "query-id" };

        // Assert
        Assert.NotEqual(0, query.MessageId);
    }

    [Fact]
    public void StructQuery_ShouldHaveAutoGeneratedMessageId()
    {
        // Arrange & Act
        var query = new GenTestStructQuery { Id = "query-id" };

        // Assert
        Assert.NotEqual(0, query.MessageId);
    }

    [Fact]
    public void ManualMessageId_ShouldNotBeOverridden()
    {
        // Arrange & Act
        var command = new ManualMessageIdCommand { MessageId = 12345, Data = "test" };

        // Assert
        Assert.Equal(12345, command.MessageId);
    }
}

// Test message types - Record
public partial record GenTestRecordCommand(string Data) : IRequest<string>;
public partial record GenTestRecordEvent(string Id, string Data) : IEvent;
public partial record GenTestRecordQuery(string Id) : IRequest<string>;

// Test message types - Class
public partial class GenTestClassCommand : IRequest<string>
{
    public string Data { get; set; } = string.Empty;
}

public partial class GenTestClassEvent : IEvent
{
    public string Id { get; set; } = string.Empty;
    public string Data { get; set; } = string.Empty;
}

public partial class GenTestClassQuery : IRequest<string>
{
    public string Id { get; set; } = string.Empty;
}

// Test message types - Struct
public partial struct GenTestStructCommand : IRequest<string>
{
    public GenTestStructCommand()
    {
        Data = string.Empty;
    }

    public string Data { get; set; }
}

public partial struct GenTestStructEvent : IEvent
{
    public GenTestStructEvent()
    {
        Id = string.Empty;
        Data = string.Empty;
    }

    public string Id { get; set; }
    public string Data { get; set; }
}

public partial struct GenTestStructQuery : IRequest<string>
{
    public GenTestStructQuery()
    {
        Id = string.Empty;
    }

    public string Id { get; set; }
}

// Test manual MessageId (should not be overridden)
public partial class ManualMessageIdCommand : IRequest
{
    public long MessageId { get; set; }
    public string Data { get; set; } = string.Empty;
}

